[
  {
    "objectID": "unidad_6.html",
    "href": "unidad_6.html",
    "title": "6  Librerías de Python",
    "section": "",
    "text": "6.1 Introducción\nPython es un lenguaje de programación muy popular, poderoso y versátil que cuenta con una amplia gama de librerías que ayudan a que la programación sea más fácil y eficiente. Pero, ¿qué son las librerías? La librerías son conjuntos de módulos que contienen funciones, clases y variables relacionadas, que permiten realizar tareas sin tener que escribir el código desde cero y este se puede reutilizar en múltiples programas y proyectos.\nEntre las librerías disponibles se encuentran las estándares, que se incluye con cada instalación de Python, y las de código abierto creadas por la gran comunidad de desarrolladores, que constantemente genera nuevas librerías y mejora las existentes. Por ello es aconsejable que, al momento de utilizarlas, se verifique si existe alguna actualización en las guías de usuario.\nAsimismo, estas librerías se pueden clasificar según su aplicación y funcionalidad en: procesamiento de datos, visualización, aprendizaje automático, desarrollo web, procesamiento de lenguaje y de imágenes, entre otras. En este capítulo se analizarán tres de las librerías más reconocidas y ampliamente utilizadas de Python: NumPy y Pandas para procesamiento de datos y Matplotlib, para visualización.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Librerías de Python</span>"
    ]
  },
  {
    "objectID": "unidad_6.html#introducción",
    "href": "unidad_6.html#introducción",
    "title": "6  Librerías de Python",
    "section": "",
    "text": "6.1.1 ¿Cómo se utilizan las librerías?\nPara acceder a una librería y sus funciones, se debe instalar por única vez y luego, importar cada vez que la necesitemos:\n\nLa instalación se puede llevar a cabo desde el símbolo del sistema (o en inglés: “Command Prompt”), corriendo: pip install –nombre_de_librería o en el script de Google Colab, con el siguiente comando ! pip install –nombre_de_librería\nPara importarla, en la parte superior de nuestro código debemos correr import –nombre_de_librería as –nombre_de_librería_corto. El alias o el nombre corto de la librería se suele agregar para lograr una mayor legilibilidad del código, pero no es mandatorio.",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Librerías de Python</span>"
    ]
  },
  {
    "objectID": "unidad_6.html#numpy",
    "href": "unidad_6.html#numpy",
    "title": "6  Librerías de Python",
    "section": "6.2 NumPy",
    "text": "6.2 NumPy\nNumPy es una librería de código abierto muy utilizada en el campo de la ciencia y la ingeniería. Permite trabajar con datos numéricos, matrices multidimensionales, funciones matemáticas y estadísticas avanzadas.\nComo ya se mencionó anteriormente, para utilizarse se debe instalar e importar. Por convención, se suele importar como:\n\nimport numpy as np\n\nNumPy incorpora una estructura de datos propia llamados arrays que es similar a la lista de Python, pero puede almacenar y operar con datos de manera mucho más eficiente. ¡El procesamiento de los arrays es hasta 50 veces más rápido! Esta diferencia de velocidad se debe, en parte, a que los arrays contienen datos homogéneos, a diferencia de las listas que pueden contener distintos tipos de datos dentro.\n\n6.2.1 ¿Qué es un array?\nUn array es un conjunto de elementos del mismo tipo, donde cada uno de ellos posee una posición y esta, es única para cada elemento. Para comprenderlo, analicemos el siguiente ejemplo: si pensamos en una matriz, lo primero que nos viene a la mente es una tabla con valores ordenados en filas y columnas, donde una fila es la línea horizontal y una columna es la vertical. Es decir, una matriz es un conjunto de elementos que posee una posición o índice determinado determinado por la fila y la columna, por lo que sería un array.\nTambién, es posible encontrar en la bibliografía el término ndarray, que es una abreviatura de “array N-dimensional”, debido a que los arrays pueder ser de dimensión nula (0-D), unidimensional, bidimensional, tridimensional, etc, llamados comúnmente escalar, vector, matriz y tensor, respectivamente. En este capítulo se trabajará principalmente con vectores y matrices ya que consideramos que les será útil para aplicar los conocimientos de Numpy en otras materias.\n\n6.2.1.1 ¿Cómo se crea un array?\nUn array se crea usando la función array() a partir de listas o tuplas. Por ejemplo:\n\na = np.array([1, 2, 3])\nprint(a)\n\n[1 2 3]\n\n\nTambién, se pueden crear arrays particulares, constituídos por ceros con zeros() o por unos con ones():\n\n# Creo un array de ceros con dos elementos\na_ceros = np.zeros(2)\nprint(a_ceros)\n\n[0. 0.]\n\n\n\n# Creo un array de unos con dos elementos\na_unos = np.ones(2)\nprint(a_unos)\n\n[1. 1.]\n\n\nAdemás, se pueden crear arrays con un rango de números, utilizando arange() o linspace():\n\n# Creo un array con un rango que empieza en 2 hasta 9 y va de 2 en 2.\na_rango = np.arange(2, 9, 2)\nprint(a_rango)\n\n[2 4 6 8]\n\n\n\n# Creo un array con un rango formado por 4 números, que empieza en 2 hasta 8 (incluídos). \na_rango_2 = np.linspace(2, 8, num=4)\nprint(a_rango_2)\n\n[2. 4. 6. 8.]\n\n\nFinalmente, para crear arrays de más dimensiones, se utilizan varias listas:\n\nmatriz = np.array([[1, 2, 3], [4, 5, 6]])\n\nprint(matriz)\n\n[[1 2 3]\n [4 5 6]]\n\n\n\n\n6.2.1.2 Atributos de un array\nPara caracterizar un array es necesario conocer sus dimensiones, utilizando ndim. De esta forma, se puede confirmar que el array llamado matriz, definido anteriormente, es bidimensional:\n\n# Número de ejes o dimensiones de la matriz\nmatriz.ndim\n\n2\n\n\nOtra característica de interés es su forma o shape: para las matrices bidimensionales, se muestra una tupla (n, m) con el número de filas n y de columnas m:\n\n# (n = filas, m = columnas)\nmatriz.shape\n\n(2, 3)\n\n\n\n# Número total de elementos de la matriz: 2 filas x 3 columnas = 6 elementos\nmatriz.size\n\n6\n\n\nAl elemento de una matriz A que se encuentra en la fila i-ésima y la columna j-ésima se llama aij. De manera análoga, para acceder a un elemento de un array se debe indicar primero la posición de la fila y luego, de la columna:\n\nprint('Elemento de la primera fila y segunda columna: ', matriz[0, 1])\n\nElemento de la primera fila y segunda columna:  2\n\n\nO se puede elegir un rango de elementos en una fila o columna particular:\n\nprint('Los elementos de la primera fila, columnas 0 y 1: ', matriz[0, 0:2])\n\nLos elementos de la primera fila, columnas 0 y 1:  [1 2]\n\n\n\nprint('Los elementos de la segunda columna, filas 0 y 1: ', matriz[0:2, 1])\n\nLos elementos de la segunda columna, filas 0 y 1:  [2 5]\n\n\n\n\n6.2.1.3 Modificar arrays\nDe forma similar a lo aprendido con las listas de Python, se pueden modificar los arrays utilizando ciertas funciones. Para entender y aplicar las mismas, definamos un vector llamado a:\n\na = np.array([2, 1, 5, 3, 7, 4, 6, 8])\n\nprint(a)\n\n[2 1 5 3 7 4 6 8]\n\n\nA este vector, se le puede modificar la forma: pasando de ser (8,) a (4,2), por dar un ejemplo:\n\na_reshape = a.reshape(2, 4) # 2 filas y 4 columnas\n\nprint(a_reshape)\n\n[[2 1 5 3]\n [7 4 6 8]]\n\n\nTambién, se modría insertar una fila (axis = 0) o una columna (axis = 1) en una determinada posición. Por ejemplo:\n\n# Agregar fila de cincos en posición 1:\nprint(np.insert(a_reshape, 1, 5, axis=0))\n\n[[2 1 5 3]\n [5 5 5 5]\n [7 4 6 8]]\n\n\n\n# Agregar columna de cincos en posición 1:\nprint(np.insert(a_reshape, 1, 5, axis=1))\n\n[[2 5 1 5 3]\n [7 5 4 6 8]]\n\n\nO lo que es equivalente:\n\n# Agregar columna de cincos en posición 1:\nprint(np.insert(a_reshape, 1, [5, 5], axis=1))\n\n[[2 5 1 5 3]\n [7 5 4 6 8]]\n\n\n\n\n\n\n\n\nObservemos los parámetros\n\n\n\n\nNote que a la función insert(), se le debe indicar:\n- el array que se desea modificar\n- la posición de la fila o columna que se desea agregar\n- los valores a insertar. ¡Ojo con las dimensiones! Para el ejemplo anterior, a_reshape tenía 2 filas, por lo que se debe agregar una columna con 2 elementos o una fila con 4.\n- el eje que se agrega: una fila (axis = 0) o una columna (axis = 1)\n\n\n\nTambién podríamos agregar una fila o una columna utilizando append() al final, como ocurría con las listas:\n\n# Agregar una última fila\na_modificada = np.append(a_reshape, [[1, 2, 3, 4]], axis=0)\nprint(a_modificada)\n\n[[2 1 5 3]\n [7 4 6 8]\n [1 2 3 4]]\n\n\nO eliminarlas con delete()\n\n# Eliminar la fila de la posición 2.\nprint(np.delete(a_modificada, 2, axis=0))\n\n[[2 1 5 3]\n [7 4 6 8]]\n\n\nFinalmente, podemos concatenar arrays, como los siguientes:\n\na = np.array([2, 1, 5, 3])\nb = np.array([7, 4, 6, 8])\n\n# Concatenar a y b:\nc = np.concatenate((a, b))\nprint(c)\n\n[2 1 5 3 7 4 6 8]\n\n\nY ordenar los elementos de un array como numérico o alfabético, ascendente o descendente.\n\nprint(np.sort(c))\n\n[1 2 3 4 5 6 7 8]\n\n\n\n\n\n6.2.2 Operaciones aritméticas utilizando array\nComo se ha mencionado anteriormente, Numpy tiene un gran potencial para realizar operaciones, muy superior al de las listas de Python, gracias a la vectorización que es mucho más rápido que iterar sobre cada elementos. Por ejemplo, si quisieramos sumar dos listas de python necesitaríamos realizar un for y utilizar el método `zip():\n\n# Definir listas\na = [2, 1, 5, 3]\nb = [7, 4, 6, 8]\nc = []\n\n# Sumar el primer elemento de a con el primero de b, el segundo elemento de a con el segundo de b y así sucesivamente\nfor i, j in zip(a, b):\n  c.append(i + j)\nprint(c)\n\n[9, 5, 11, 11]\n\n\nUtlizando las funciones de Numpy, esto ya no es más necesario:\n\n# add() para sumar elemento a elemento de a y b\nc = np.add(a, b)\nprint(c)\n\n[ 9  5 11 11]\n\n\nUna vez aclarado esto, ¡A calcular!\n\n6.2.2.1 Operaciones básicas:\nA continuación se muestra una lista con las operaciones básicas junto con sus operadores asociados, funciones y ejemplos.\n\n\n\nOperación\nOperador\nFunción\n\n\n\n\nSuma\n+\nadd()\n\n\nResta\n-\nsubtract()\n\n\nMultiplicación\n*\nmultiply()\n\n\nDivisión\n/\ndivide()\n\n\nPotencia\n**\npower()\n\n\n\nDefinimos los vectores a y b con los que operaremos y veremos ejemplos:\n\na = np.array([1, 3, 5, 7])\nb = np.array([1, 1, 2, 2])\n\n\nSuma:\n\n\nresultado_1 = a + b\nprint(\"Suma usando +:\", resultado_1) \n\nresultado_2 = np.add(a, b)\nprint(\"Suma usando add():\", resultado_2) \n\nSuma usando +: [2 4 7 9]\nSuma usando add(): [2 4 7 9]\n\n\n\nResta:\n\n\nresultado_1 = a - b\nprint(\"Resta usando -:\", resultado_1) \n\nresultado_2 = np.subtract(a, b)\nprint(\"Resta usando subtract():\", resultado_2) \n\nResta usando -: [0 2 3 5]\nResta usando subtract(): [0 2 3 5]\n\n\n\nMultiplicación:\n\n\nresultado_1 = a * b\nprint(\"Multiplicación usando *:\", resultado_1) \n\nresultado_2 = np.multiply(a, b)\nprint(\"Multiplicación usando multiply():\", resultado_2) \n\nMultiplicación usando *: [ 1  3 10 14]\nMultiplicación usando multiply(): [ 1  3 10 14]\n\n\n\nDivisión:\n\n\nresultado_1 = a / b\nprint(\"División usando /:\", resultado_1) \n\nresultado_2 = np.divide(a, b)\nprint(\"División usando divide():\", resultado_2) \n\nDivisión usando /: [1.  3.  2.5 3.5]\nDivisión usando divide(): [1.  3.  2.5 3.5]\n\n\n\nPotencia:\n\n\nresultado_1 = a ** b\nprint(\"Potencia usando **:\", resultado_1) \n\nresultado_2 = np.power(a, b)\nprint(\"Potencia usando power():\", resultado_2) \n\nPotencia usando **: [ 1  3 25 49]\nPotencia usando power(): [ 1  3 25 49]\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote que si quisieramo operar con un vector b de elementos iguales, podríamos utilizar un escalar.\n\n\n\nb = np.array([2, 2, 2, 2])\n\nresultado_1 = a * b\nprint(\"Usando un vector b = [2, 2, 2, 2]:\", resultado_1) \n\nresultado_2 = a * 2\nprint(\"Usando un escalar b = 2:\", resultado_2) \n\nUsando un vector b = [2, 2, 2, 2]: [ 2  6 10 14]\nUsando un escalar b = 2: [ 2  6 10 14]\n\n\n\n\n6.2.2.2 Logaritmo:\nNumPy provee funciones para los logaritmos de base 2, 10 y e:\n\n\n\nBase\nFunción\n\n\n\n\n2\nlog2()\n\n\n10\nlog10()\n\n\ne\nlog()\n\n\n\nPor ejemplo:\n\n# Ejemplo log2()\nprint(\"Logaritmo base 2:\", np.log2([2, 4, 8, 16]))\n# Ejemplo log10()\nprint(\"Logaritmo base 10:\", np.log10([10, 100, 1000, 10000]))\n# Ejemplo log()\nprint(\"Logaritmo base e:\", np.log([1, np.e, np.e**2]))\n\nLogaritmo base 2: [1. 2. 3. 4.]\nLogaritmo base 10: [1. 2. 3. 4.]\nLogaritmo base e: [0. 1. 2.]\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote que el número de Euler o número e es una constante incluída en NumPy como: np.e\n\n\n\nnp.e\n\n2.718281828459045\n\n\n\n\n6.2.2.3 Funciones trigonométricas:\nA continuación, una lista con las funciones trigonométricas más utilizadas, que toman los valores en radianes:\n\n\n\nFunción trigonométrica\nFunción\n\n\n\n\nseno\nsin()\n\n\ncoseno\ncos()\n\n\ntangente\ntan()\n\n\narcoseno\narcsin()\n\n\narcocoseno\narccos()\n\n\narcotangente\narctan()\n\n\n\nPor ejemplo:\n\n# Ejemplo de seno\nprint(\"Seno de π / 2:\", np.sin(np.pi / 2))\n\n# Ejemplo de arcoseno\n# print(v, np.arcsin(1))\n\nSeno de π / 2: 1.0\n\n\n\n# Ejemplo de coseno\nprint(\"Coseno de π:\", np.cos(np.pi))\n\n# Ejemplo de arcocoseno\nprint(\"Arcoseno de -1:\", np.arccos(-1))\n\nCoseno de π: -1.0\nArcoseno de -1: 3.141592653589793\n\n\n\n# Ejemplo de tangente:\nprint(\"Tangente de 0:\", np.tan(0))\n\n# Ejemplo de arcotangente:\nprint(\"Arcotangente de 0:\", np.arctan(0))\n\nTangente de 0: 0.0\nArcotangente de 0: 0.0\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote que el número π es una constante incluída en NumPy como: np.pi\n\n\n\nnp.pi\n\n3.141592653589793\n\n\nPara convertir los radianes a grados y viceversa, se utiliza deg2rad() y rad2deg() respectivamente:\n\nprint(\"De grados [90, 180, 270, 360] a radianes:\", \n      np.deg2rad([90, 180, 270, 360]))\n\nprint(\"De radianes [π/2, π, 1.5*π, 2*π] a grados:\", \n      np.rad2deg([np.pi/2, np.pi, 1.5*np.pi, 2*np.pi]))\n\nDe grados [90, 180, 270, 360] a radianes: [1.57079633 3.14159265 4.71238898 6.28318531]\nDe radianes [π/2, π, 1.5*π, 2*π] a grados: [ 90. 180. 270. 360.]\n\n\n\n\n6.2.2.4 Operaciones con matrices:\nA continuación, una lista con las operaciones que les pueden ser de interés mientras estudian álgebra matricial:\n\n\n\nFunción\nDescripción\n\n\n\n\ndot()\nProducto vectorial\n\n\ntranspose()\nTraspuesta\n\n\nlinalg.inv()\nInversa\n\n\nlinalg.det()\nDeterminante\n\n\n\nDefinimos las matrices 1 y 2 con los que operaremos y veremos ejemplos:\n\n# Crear matrices\nmatriz_1 = np.array([[1, 3], [5, 7]])\nmatriz_2 = np.array([[2, 6], [4, 8]])\n\n\nprint(\"Producto vectorial entre la matriz 1 y 2: \\n\", np.dot(matriz_1, matriz_2))\n\nProducto vectorial entre la matriz 1 y 2: \n [[14 30]\n [38 86]]\n\n\n\nprint(\"Traspuesta de la matriz 1: \\n\", np.transpose(matriz_1))\n\nTraspuesta de la matriz 1: \n [[1 5]\n [3 7]]\n\n\n\nprint(\"Inversa de la matriz 1: \\n\", np.linalg.inv(matriz_1))\n\nInversa de la matriz 1: \n [[-0.875  0.375]\n [ 0.625 -0.125]]\n\n\n\nprint(\"Determinante de la matriz 1: \\n\", np.linalg.det(matriz_1))\n\nDeterminante de la matriz 1: \n -7.999999999999998\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote que así como existen constantes numéricas, existen las matrices particulares como las compuestas por ceros np.zeros(), por unos np.ones() y la matriz identidad np.eyes.\n\n\n\nprint(\"Matriz de identidad de 3x3: \\n\", np.eye(3))\n\nMatriz de identidad de 3x3: \n [[1. 0. 0.]\n [0. 1. 0.]\n [0. 0. 1.]]\n\n\n\n\n6.2.2.5 Más operaciones útiles:\n\n\n\n\n\n\n\n\nOperaciones\nFunción\nDescripción\n\n\n\n\nMáximo\nmax()\nValor máximo del array o del eje indicado\n\n\nMínimo\nmin()\nValor mínimo del array o del eje indicado\n\n\nSuma\nsum()\nSuma de todos los elementos o del eje indicado\n\n\nPromedio\nmean()\nPromedio de todos los elementos o del eje indicado\n\n\n\nUtilizando la matriz data como ejemplo:\n\ndata = np.array([[1, 2], [5, 3], [4, 6]])\n\n\nValor máximo\n\n\nprint(\"Valor máximo de todo el array: \", data.max())\nprint(\"Valores máximos de cada columna: \", data.max(axis=0))\n\nValor máximo de todo el array:  6\nValores máximos de cada columna:  [5 6]\n\n\n\nValor mínimo\n\n\nprint(\"Valor mínimo de todo el array: \", data.min())\nprint(\"Valores mínimos de cada fila: \", data.min(axis=1))\n\nValor mínimo de todo el array:  1\nValores mínimos de cada fila:  [1 3 4]\n\n\n\nSuma de elementos:\n\n\nprint(\"Suma de todos los elementos del array: \", data.sum())\nprint(\"Suma de los elementos de cada fila: \", data.sum(axis=1))\n\nSuma de todos los elementos del array:  21\nSuma de los elementos de cada fila:  [ 3  8 10]\n\n\n\nPromedio:\n\n\nprint(\"Promedio de todos los elementos del array: \", data.mean())\nprint(\"Promedio de los elementos de cada columna: \", data.mean(axis=0))\n\nPromedio de todos los elementos del array:  3.5\nPromedio de los elementos de cada columna:  [3.33333333 3.66666667]",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Librerías de Python</span>"
    ]
  },
  {
    "objectID": "unidad_6.html#pandas",
    "href": "unidad_6.html#pandas",
    "title": "6  Librerías de Python",
    "section": "6.3 Pandas",
    "text": "6.3 Pandas\nPandas es una librería de código abierto, diseñada específicamente para la manipulación y el análisis de datos en Python. Es una herramienta poderosa que puede ayudar a los usuarios a limpiar, transformar y analizar datos de una manera rápida y eficiente.\nDado que se basa en la NumPy, luego de instalarse, se deben importar ambas librerías. Por convención, se suele importar como:\n\nimport pandas as pd\n\nPandas incorpora dos estructuras de datos llamados Series y DataFrame.\n\n6.3.1 ¿Qué es una Serie y un DataFrame?\nUna serie es un vector (unidimensional) capaz de contener cualquier tipo de dato, como por ejemplo, números enteros o decimales, strings, objetos de Python, etc.\nPara crearlas, se puede partir de un escalar, una lista, un diccionario, etc. utilizando pd.Serie():\n\n# Crear serie partiendo de una lista:\nlista = [1, \"a\", 3.5]\n\npd.Series(lista)\n\n0      1\n1      a\n2    3.5\ndtype: object\n\n\nNote que se ven dos líneas verticales de datos. A la derecha se observa una columna con los elementos de la lista antes creada, mientas que a la izquierda se encuentra el índice, formado por valores desde 0 a n-1, siendo n la cantidad de elementos. Este índice numérico es el predefinido, por lo que si se deseara uno particular, se puede establecer utilizando index.\nEl índice es de vital importancia ya que permite acceder a los elementos de la serie. Por ello, al establecer un índice en particular, su longitud debe ser acorde al número de elementos de la serie. De lo contrario, se mostrará un ValueError.\n\n# Crear serie partiendo de una lista, indicando el índice\npd.Series(lista, index = [\"x\", \"y\", \"z\"])\n\nx      1\ny      a\nz    3.5\ndtype: object\n\n\nEn el caso de crear Series utilizando diccionarios, sus claves o keys pasan a formar el índice.\n\n# Crear serie partiendo de un diccionario:\ndiccionario = {\"x\": 1, \"y\": \"a\", \"z\": 3.5}\n\na = pd.Series(diccionario)\na\n\nx      1\ny      a\nz    3.5\ndtype: object\n\n\nComo ya se debe estar imaginando, para acceder a un elemento de la serie, se debe indicar el valor del índice o la posición entre corchetes.\n\n# Acceder al elemento de índice x:\na[\"x\"]\n\n1\n\n\n\n# Acceder al elemento de posición 0:\na[0]\n\nC:\\Users\\aldan\\AppData\\Local\\Temp\\ipykernel_11740\\3820255327.py:2: FutureWarning: Series.__getitem__ treating keys as positions is deprecated. In a future version, integer keys will always be treated as labels (consistent with DataFrame behavior). To access a value by position, use `ser.iloc[pos]`\n  a[0]\n\n\n1\n\n\nOtra propiedad interesante de las series (y de los DataFrames, como se verá a continuación) es la vectorización: así como los arrays, no requieren recorrer valor por valor en un for para realizar operaraciones. Por ejemplo:\n\na + a\n\nx      2\ny     aa\nz    7.0\ndtype: object\n\n\nPor otro lado, un DataFrame es una estructura de datos tabular (bidimensional), compuesta por filas y columnas, que se asemeja a una hoja de cálculo de Excel.\nPara crearlos, se utiliza DataFrame() y se ingresan diferentes estructuras como arrays, diccionarios, listas, series u otros dataframes. En el siguiente ejemplo, se crea un Dataframe partiendo de un diccionario data para las columnas y de una lista label para el índice:\n\ndata = {'columna_1': ['a', 'b', 'c', 'd', 'e', 'f'],\n        'columna_2': [2.5, 3, 0.5, None, 5, None],\n        'columna_3': [1, 3, 2, 3, 2, 3]}\n\nlabels = ['a1', 'a2', 'a3', 'a4', 'a5', 'a6']\n\npd.DataFrame(data, index=labels)\n\n\n\n\n\n\n\n\ncolumna_1\ncolumna_2\ncolumna_3\n\n\n\n\na1\na\n2.5\n1\n\n\na2\nb\n3.0\n3\n\n\na3\nc\n0.5\n2\n\n\na4\nd\nNaN\n3\n\n\na5\ne\n5.0\n2\n\n\na6\nf\nNaN\n3\n\n\n\n\n\n\n\n\n6.3.1.1 Atributos y descripción de un Dataframe\nA continuación, se observa una tabla con métodos que nos permiten conocer las características de un determinado DataFrame.\n\n\n\n\n\n\n\nMétodo\nDescripción\n\n\n\n\ninfo()\nBrinda información del DataFrame como número de filas y columna, el número de valores no nulos y el tipo de datos por columnas y el uso de la memoria.\n\n\nshape\nDevuelve una tupla con el número de filas y columnas\n\n\nsize\nNúmero de elementos\n\n\ncolumns\nLista con los nombres de las columnas\n\n\nindex\nLista con los nombres de las filas\n\n\ndtypes\nSerie con los tipos de datos de las columnas\n\n\nhead()\nMuestra las primeras filas\n\n\ntail()\nMuestra las últimas filas\n\n\ndf.describe()\nResume la información de las columnas numéricas\n\n\n\nPara ejemplificar los métodos y las funciones de Pandas, usaremos el DataFrame df definido en la siguiente línea de código. Recuerda que muchas de ellas pueden ser utilizadas también para Series.\n\ndata = {'nombre': ['José Martínez', 'Rosa Díaz', 'Javier Garcíaz', 'Carmen López', 'Marisa Collado', 'Antonio Ruiz', 'Antonio Fernández', \n                   'Pilar González', 'Pedro Tenorio', 'Santiago Manzano', 'Macarena Álvarez', 'José Sanz', 'Miguel Gutiérrez', 'Carolina Moreno'],\n        'edad': [18, 32, 24, 35, 46, 68, 51, 22, 35, 46, 53, 58, 27, 20],\n        'sexo': ['H', 'M', 'H', 'M', 'M', 'H', 'H', 'M', 'H', 'H', 'M', 'H', 'H', 'M'],\n        'peso': [85.0, 65.0, None, 65.0, 51.0, 66.0, 62.0, 60.0, 90.0, 75.0, 55.0, 78.0, 109.0, 61.0],\n        'altura': [1.79, 1.73, 1.81, 1.7, 1.58, 1.74, 1.72, 1.66, 1.94, 1.85, 1.62, 1.87, 1.98, 1.77],\n        'colesterol': [182.0, 232.0, 191.0, 200.0, 148.0, 249.0, 276.0, None, 241.0, 280.0, 262.0, 198.0, 210.0, 194.0]}\n\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n\n\n2\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\n\n\n3\nCarmen López\n35\nM\n65.0\n1.70\n200.0\n\n\n4\nMarisa Collado\n46\nM\n51.0\n1.58\n148.0\n\n\n5\nAntonio Ruiz\n68\nH\n66.0\n1.74\n249.0\n\n\n6\nAntonio Fernández\n51\nH\n62.0\n1.72\n276.0\n\n\n7\nPilar González\n22\nM\n60.0\n1.66\nNaN\n\n\n8\nPedro Tenorio\n35\nH\n90.0\n1.94\n241.0\n\n\n9\nSantiago Manzano\n46\nH\n75.0\n1.85\n280.0\n\n\n10\nMacarena Álvarez\n53\nM\n55.0\n1.62\n262.0\n\n\n11\nJosé Sanz\n58\nH\n78.0\n1.87\n198.0\n\n\n12\nMiguel Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n\n\n13\nCarolina Moreno\n20\nM\n61.0\n1.77\n194.0\n\n\n\n\n\n\n\nCon info() se puede ver: - el índice en la primer línea, que es un rango de 0 a 13 - el número total de columnas en la segunda línea - el uso de la memoria en la última - una tabla con los nombres de las columnas en Column, la cantidad de valores no nulos en Non-Null Count y el tipo de dato en Dtype para cada una de ellas.\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 14 entries, 0 to 13\nData columns (total 6 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   nombre      14 non-null     object \n 1   edad        14 non-null     int64  \n 2   sexo        14 non-null     object \n 3   peso        13 non-null     float64\n 4   altura      14 non-null     float64\n 5   colesterol  13 non-null     float64\ndtypes: float64(3), int64(1), object(2)\nmemory usage: 804.0+ bytes\n\n\nNote que utilizando dtypes, columns y index se obtiene parte de esta información:\n\n# Tipo de dato por columna\ndf.dtypes\n\nnombre         object\nedad            int64\nsexo           object\npeso          float64\naltura        float64\ncolesterol    float64\ndtype: object\n\n\n\n# Nombre de cada columna\ndf.columns\n\nIndex(['nombre', 'edad', 'sexo', 'peso', 'altura', 'colesterol'], dtype='object')\n\n\n\n# índice\ndf.index\n\nRangeIndex(start=0, stop=14, step=1)\n\n\nLa forma del DataFrame es de 14 filas y 6 columnas, por lo que contiene 84 elementos.\n\n# Forma del DataFrame (filas, columnas)\ndf.shape\n\n(14, 6)\n\n\n\n# Número de elementos del DataFrame\ndf.size\n\n84\n\n\nAsimismo, cuando no conocemos un DataFrame, puede ser importante ver los primeros 5 valores con head() y/o los últimos con tail(). Si se quisiera observar un número determinado de filas, sólo hay que especificarlo, por ejemplo:\n\n# Mostrar las primeras 3 filas.\ndf.head(3)\n\n\n\n\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n\n\n2\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\n\n\n\n\n\n\n\n\n# Mostrar las últimas 5 filas.\ndf.tail()\n\n\n\n\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n9\nSantiago Manzano\n46\nH\n75.0\n1.85\n280.0\n\n\n10\nMacarena Álvarez\n53\nM\n55.0\n1.62\n262.0\n\n\n11\nJosé Sanz\n58\nH\n78.0\n1.87\n198.0\n\n\n12\nMiguel Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n\n\n13\nCarolina Moreno\n20\nM\n61.0\n1.77\n194.0\n\n\n\n\n\n\n\nPor otro lado, describe() devuelve un resumen descriptivo de las columnas de valores numéricos, como “edad”, “peso”, “altura” y “colesterol”.\n\ndf.describe()\n\n\n\n\n\n\n\n\nedad\npeso\naltura\ncolesterol\n\n\n\n\ncount\n14.000000\n13.000000\n14.000000\n13.000000\n\n\nmean\n38.214286\n70.923077\n1.768571\n220.230769\n\n\nstd\n15.621379\n16.126901\n0.115016\n39.847948\n\n\nmin\n18.000000\n51.000000\n1.580000\n148.000000\n\n\n25%\n24.750000\n61.000000\n1.705000\n194.000000\n\n\n50%\n35.000000\n65.000000\n1.755000\n210.000000\n\n\n75%\n49.750000\n78.000000\n1.840000\n249.000000\n\n\nmax\n68.000000\n109.000000\n1.980000\n280.000000\n\n\n\n\n\n\n\nEstos métricas podrían obtenerse utilizando las funciones determinadas, como: - count(): contabiliza los valores no nulos - mean(): promedio - min(): valor mínimo - max(): valor máximo\nPor ejemplo:\n\ndf.count()\n\nnombre        14\nedad          14\nsexo          14\npeso          13\naltura        14\ncolesterol    13\ndtype: int64\n\n\nFinalmente, como ocurre con las series, para acceder a los elementos de un DataFrame se puede indicar la posición o el nombre de la fila o columna.\nPara acceder a una fila en particular, utilizamos iloc[] con un entero, una lita o rango de números que indican la posición o con loc[] indicando el valor del índice.\n\n# Mostrar la fila de posición 0:\ndf.iloc[0]\n\nnombre        José Martínez\nedad                     18\nsexo                      H\npeso                   85.0\naltura                 1.79\ncolesterol            182.0\nName: 0, dtype: object\n\n\n\n# Mostrar la fila de posición 0:\ndf.iloc[[0]]\n\n\n\n\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\n\n\n\n\n\n\n# Mostrar las filas de posición 0 y 3:\ndf.iloc[[0, 3]]\n\n\n\n\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\n3\nCarmen López\n35\nM\n65.0\n1.70\n200.0\n\n\n\n\n\n\n\n\n# Mostrar las filas de posiciones entre 0 hasta 3:\ndf.iloc[:3]\n\n\n\n\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n\n\n2\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\n\n\n\n\n\n\n\n\n# Equivalente a df.iloc[:3]:\ndf.head(3)\n\n\n\n\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n\n\n2\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\n\n\n\n\n\n\n\n\n# Mostar la fila cuyo valor del índice es 0:\ndf.loc[0]\n\nnombre        José Martínez\nedad                     18\nsexo                      H\npeso                   85.0\naltura                 1.79\ncolesterol            182.0\nName: 0, dtype: object\n\n\nPor otro lado, para acceder a una columna se puede utilizar los nombres de la mismas con DataFrame[columna] o su equivalente DataFrame.columna.\n\n# Mostrar la columna \"nombre\"\ndf['nombre'] # o df.nombre\n\n0         José Martínez\n1             Rosa Díaz\n2        Javier Garcíaz\n3          Carmen López\n4        Marisa Collado\n5          Antonio Ruiz\n6     Antonio Fernández\n7        Pilar González\n8         Pedro Tenorio\n9      Santiago Manzano\n10     Macarena Álvarez\n11            José Sanz\n12     Miguel Gutiérrez\n13      Carolina Moreno\nName: nombre, dtype: object\n\n\n\n# Mostrar más de una columna: \"nombre\" y \"edad\":\ndf[['nombre', 'edad']]\n\n\n\n\n\n\n\n\nnombre\nedad\n\n\n\n\n0\nJosé Martínez\n18\n\n\n1\nRosa Díaz\n32\n\n\n2\nJavier Garcíaz\n24\n\n\n3\nCarmen López\n35\n\n\n4\nMarisa Collado\n46\n\n\n5\nAntonio Ruiz\n68\n\n\n6\nAntonio Fernández\n51\n\n\n7\nPilar González\n22\n\n\n8\nPedro Tenorio\n35\n\n\n9\nSantiago Manzano\n46\n\n\n10\nMacarena Álvarez\n53\n\n\n11\nJosé Sanz\n58\n\n\n12\nMiguel Gutiérrez\n27\n\n\n13\nCarolina Moreno\n20\n\n\n\n\n\n\n\nFinalmente, se puede utilizar loc[filas, columnas] que devuelve un DataFrame con los elemento que se encuentra en las filas con los nombres de la lista filas y las columnas con los nombres de la lista columna.\n\n# Mostrar la filas de índice 0, 1, 2, 3, columnas \"nombre\" y \"edad\"\ndf.loc[:3, ['nombre', 'edad']]\n\n\n\n\n\n\n\n\nnombre\nedad\n\n\n\n\n0\nJosé Martínez\n18\n\n\n1\nRosa Díaz\n32\n\n\n2\nJavier Garcíaz\n24\n\n\n3\nCarmen López\n35\n\n\n\n\n\n\n\n\n# O su equivalente:\ndf.loc[df.index[[0, 1, 2, 3]], ['nombre', 'edad']]\n\n\n\n\n\n\n\n\nnombre\nedad\n\n\n\n\n0\nJosé Martínez\n18\n\n\n1\nRosa Díaz\n32\n\n\n2\nJavier Garcíaz\n24\n\n\n3\nCarmen López\n35\n\n\n\n\n\n\n\n\n\n6.3.1.2 Modificar un Dataframe\nA la hora de modificar un DataFrame puede ser que querramos cambiar la estructura del mismo, como los nombres de las columnas y de los índices, agregar una nueva filas o columna o reemplazar un dato en una determinada posición. A continuación, se enumeran distintos métodos para llevar a cabo estos cambios.\n\n\n\n\n\n\n\nMétodo\nDescripción\n\n\n\n\nset_index()\nConvierte una determinada columna en el nuevo índice.\n\n\nreset_index()\nReestablece el índice predefinido\n\n\nrename()\nRenombra las columnas\n\n\ninsert()\nAgrega columnas\n\n\nloc[]\nAgrega fila en un dado índice\n\n\ndrop()\nElimina columnas y filas\n\n\nloc[]\nModifica un valor particular dado un índice y una columna\n\n\nmap()\nBusca un valor dado en una columna y lo reemplaza\n\n\nreplace()\nReemplaza un valor dado en una columna\n\n\n\nPor ejemplo, utilizando set_index() podemos transformar a la columna “nombre” en el nuevo índice, y para volver a tener el predefinido, usando reset_index().\n\ndf = df.set_index(keys = \"nombre\")\ndf.head()\n\n\n\n\n\n\n\n\nedad\nsexo\npeso\naltura\ncolesterol\n\n\nnombre\n\n\n\n\n\n\n\n\n\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n\n\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\n\n\nCarmen López\n35\nM\n65.0\n1.70\n200.0\n\n\nMarisa Collado\n46\nM\n51.0\n1.58\n148.0\n\n\n\n\n\n\n\n\ndf = df.reset_index()\ndf.head()\n\n\n\n\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n\n\n2\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\n\n\n3\nCarmen López\n35\nM\n65.0\n1.70\n200.0\n\n\n4\nMarisa Collado\n46\nM\n51.0\n1.58\n148.0\n\n\n\n\n\n\n\nPara renombrar una columna, se utiliza rename(columns={\"nombre_columna\": \"nuevo_nombre_columna\"})\n\n# Reemplazo \"nombre\" por \"nombre y apellido\"\ndf = df.rename(columns={\"nombre\": \"nombre y apellido\"})\ndf.head()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n\n\n2\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\n\n\n3\nCarmen López\n35\nM\n65.0\n1.70\n200.0\n\n\n4\nMarisa Collado\n46\nM\n51.0\n1.58\n148.0\n\n\n\n\n\n\n\nPara agregar una nueva columna, existe el método insert(), que requiere indicar a posición de la nueva columna, el nombre de la nueva columna, y los valores de la misma. Para ello, creamos una lista llamada direccion con 14 valores, para cada una de las personas del DataFrame.\n\n# Valores de la nueva columna\ndireccion = [\"CABA\", \"Bs As\", \"Bs As\", \"Bs As\", \"CABA\", \"Bs As\", \"CABA\", \"CABA\", \"CABA\", \"CABA\", \"CABA\", \"Bs As\", \"CABA\", \"CABA\"]\n\n# Insertar la columna \"direccion\" en la posición 3:\ndf.insert(3, \"direccion\", direccion)\ndf.head()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\ndireccion\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\nCABA\n85.0\n1.79\n182.0\n\n\n1\nRosa Díaz\n32\nM\nBs As\n65.0\n1.73\n232.0\n\n\n2\nJavier Garcíaz\n24\nH\nBs As\nNaN\n1.81\n191.0\n\n\n3\nCarmen López\n35\nM\nBs As\n65.0\n1.70\n200.0\n\n\n4\nMarisa Collado\n46\nM\nCABA\n51.0\n1.58\n148.0\n\n\n\n\n\n\n\nPara agregar una nueva fila, e utiliza el ya conocido loc[], que requiere indicar el índice y los valores de la misma. Para ello, creamos una lista llamada nueva_fila con valores para cada columna del DataFrame.\n\n# Valores de la nueva fila\nnueva_fila = ['Carlos Rivas', 28, 'H', \"Bs As\", 89.0, 1.78, 245.0]\n\n# Insertar la fila 14\ndf.loc[14] = nueva_fila\ndf.tail()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\ndireccion\npeso\naltura\ncolesterol\n\n\n\n\n10\nMacarena Álvarez\n53\nM\nCABA\n55.0\n1.62\n262.0\n\n\n11\nJosé Sanz\n58\nH\nBs As\n78.0\n1.87\n198.0\n\n\n12\nMiguel Gutiérrez\n27\nH\nCABA\n109.0\n1.98\n210.0\n\n\n13\nCarolina Moreno\n20\nM\nCABA\n61.0\n1.77\n194.0\n\n\n14\nCarlos Rivas\n28\nH\nBs As\n89.0\n1.78\n245.0\n\n\n\n\n\n\n\nPara eliminar una columna (axis=1) o fila (axis=0), se utiliza drop():\n\n# Elimino columna \"direccion\", equivalente a del df[\"direccion\"]\ndf = df.drop('direccion', axis=1)  \ndf.head()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n\n\n2\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\n\n\n3\nCarmen López\n35\nM\n65.0\n1.70\n200.0\n\n\n4\nMarisa Collado\n46\nM\n51.0\n1.58\n148.0\n\n\n\n\n\n\n\n\n# Elimino fila 14\ndf = df.drop(14, axis=0) \ndf.tail()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\n\n9\nSantiago Manzano\n46\nH\n75.0\n1.85\n280.0\n\n\n10\nMacarena Álvarez\n53\nM\n55.0\n1.62\n262.0\n\n\n11\nJosé Sanz\n58\nH\n78.0\n1.87\n198.0\n\n\n12\nMiguel Gutiérrez\n27\nH\n109.0\n1.98\n210.0\n\n\n13\nCarolina Moreno\n20\nM\n61.0\n1.77\n194.0\n\n\n\n\n\n\n\n\n\n\n\n\n\nAgregar columnas con operaciones\n\n\n\nComo se ha mencionado anteriormente, gracias a la vectorización se puedem agregar columnas partiendo de operaciones entre columnas existentes en el DataFrame\n\n\nPor ejemplo, suponga que queremos ingresar una columna el índice de masa corporal de las personas, que se calcula de la siguiente manera:\n\\[\nIMC = \\frac{Peso}{Altura^2}\\]\n\n# Crear la columna \"IMC\"\ndf[\"IMC\"] = df[\"peso\"] / df[\"altura\"]**2\ndf.head()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n26.528510\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n21.718066\n\n\n2\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\nNaN\n\n\n3\nCarmen López\n35\nM\n65.0\n1.70\n200.0\n22.491349\n\n\n4\nMarisa Collado\n46\nM\n51.0\n1.58\n148.0\n20.429418\n\n\n\n\n\n\n\nDe manera análoga, se puede crear la columna dirección sin utilizar insert():\n\ndf[\"direccion\"] = direccion\ndf.head()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n26.528510\nCABA\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n21.718066\nBs As\n\n\n2\nJavier Garcíaz\n24\nH\nNaN\n1.81\n191.0\nNaN\nBs As\n\n\n3\nCarmen López\n35\nM\n65.0\n1.70\n200.0\n22.491349\nBs As\n\n\n4\nMarisa Collado\n46\nM\n51.0\n1.58\n148.0\n20.429418\nCABA\n\n\n\n\n\n\n\nFinalmente, para cambiar un valor determinado, como por ejemplo el peso de Javier García en la tercer fila:\n\ndf.loc[2, 'peso'] = 92\ndf.head()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n0\nJosé Martínez\n18\nH\n85.0\n1.79\n182.0\n26.528510\nCABA\n\n\n1\nRosa Díaz\n32\nM\n65.0\n1.73\n232.0\n21.718066\nBs As\n\n\n2\nJavier Garcíaz\n24\nH\n92.0\n1.81\n191.0\nNaN\nBs As\n\n\n3\nCarmen López\n35\nM\n65.0\n1.70\n200.0\n22.491349\nBs As\n\n\n4\nMarisa Collado\n46\nM\n51.0\n1.58\n148.0\n20.429418\nCABA\n\n\n\n\n\n\n\nPara transformar los valores de una columna entera, podemos utilizar map() pasando un diccionario del estilo {valor_viejo: valor_nuevo}. Por ejemplo, modificar la columna “sexo” reemplazando “H” por “M” y “M” por “F”:\n\ndf['sexo'] = df['sexo'].map({'H': 'M', 'M': 'F'})\ndf.head()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n0\nJosé Martínez\n18\nM\n85.0\n1.79\n182.0\n26.528510\nCABA\n\n\n1\nRosa Díaz\n32\nF\n65.0\n1.73\n232.0\n21.718066\nBs As\n\n\n2\nJavier Garcíaz\n24\nM\n92.0\n1.81\n191.0\nNaN\nBs As\n\n\n3\nCarmen López\n35\nF\n65.0\n1.70\n200.0\n22.491349\nBs As\n\n\n4\nMarisa Collado\n46\nF\n51.0\n1.58\n148.0\n20.429418\nCABA\n\n\n\n\n\n\n\nOtra manera sería utilizando replace(), como en la columna “direccion” donde se modificó “Bs As” por “Buenos Aires”.\n\ndf['direccion'] = df['direccion'].replace('Bs As', 'Buenos Aires')\ndf.head()\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n0\nJosé Martínez\n18\nM\n85.0\n1.79\n182.0\n26.528510\nCABA\n\n\n1\nRosa Díaz\n32\nF\n65.0\n1.73\n232.0\n21.718066\nBuenos Aires\n\n\n2\nJavier Garcíaz\n24\nM\n92.0\n1.81\n191.0\nNaN\nBuenos Aires\n\n\n3\nCarmen López\n35\nF\n65.0\n1.70\n200.0\n22.491349\nBuenos Aires\n\n\n4\nMarisa Collado\n46\nF\n51.0\n1.58\n148.0\n20.429418\nCABA\n\n\n\n\n\n\n\n\n\n6.3.1.3 Filtrar un Dataframe\nPara filtrar los elementos de un DataFrame se suelen utilizar condiciones lógicas. Por ejemplo:\n\n# Seleccionar aquellas personas menores de 40 años:\ndf[df['edad'] &lt; 40]\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n0\nJosé Martínez\n18\nM\n85.0\n1.79\n182.0\n26.528510\nCABA\n\n\n1\nRosa Díaz\n32\nF\n65.0\n1.73\n232.0\n21.718066\nBuenos Aires\n\n\n2\nJavier Garcíaz\n24\nM\n92.0\n1.81\n191.0\nNaN\nBuenos Aires\n\n\n3\nCarmen López\n35\nF\n65.0\n1.70\n200.0\n22.491349\nBuenos Aires\n\n\n7\nPilar González\n22\nF\n60.0\n1.66\nNaN\n21.773842\nCABA\n\n\n8\nPedro Tenorio\n35\nM\n90.0\n1.94\n241.0\n23.913275\nCABA\n\n\n12\nMiguel Gutiérrez\n27\nM\n109.0\n1.98\n210.0\n27.803285\nCABA\n\n\n13\nCarolina Moreno\n20\nF\n61.0\n1.77\n194.0\n19.470778\nCABA\n\n\n\n\n\n\n\nCuando se requieren múltiples condiciones, se puede adicionar usando símbolos como & para intersecciones y | para uniones. Por ejemplo:\n\n# Seleccionar aquellas personas de sexo femenino y menores de 40 años:\ndf[(df['edad'] &lt; 40) & (df['sexo'] == 'F')]\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n1\nRosa Díaz\n32\nF\n65.0\n1.73\n232.0\n21.718066\nBuenos Aires\n\n\n3\nCarmen López\n35\nF\n65.0\n1.70\n200.0\n22.491349\nBuenos Aires\n\n\n7\nPilar González\n22\nF\n60.0\n1.66\nNaN\n21.773842\nCABA\n\n\n13\nCarolina Moreno\n20\nF\n61.0\n1.77\n194.0\n19.470778\nCABA\n\n\n\n\n\n\n\n\n# Seleccionar aquellas personas cuyo peso es 60kg o 90kg:\ndf[(df['peso'] == 60.0) | (df['peso'] == 90.0)]\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n7\nPilar González\n22\nF\n60.0\n1.66\nNaN\n21.773842\nCABA\n\n\n8\nPedro Tenorio\n35\nM\n90.0\n1.94\n241.0\n23.913275\nCABA\n\n\n\n\n\n\n\nCuando se desea filtrar con un cierto rango, se pueden utilizar las condiciones antes mencionadas o la función between().\n\n# Equivalente a df[(df['edad'] &gt; 25) & (df['edad'] &lt; 40)]\ndf[df['edad'].between(25, 40)]\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n1\nRosa Díaz\n32\nF\n65.0\n1.73\n232.0\n21.718066\nBuenos Aires\n\n\n3\nCarmen López\n35\nF\n65.0\n1.70\n200.0\n22.491349\nBuenos Aires\n\n\n8\nPedro Tenorio\n35\nM\n90.0\n1.94\n241.0\n23.913275\nCABA\n\n\n12\nMiguel Gutiérrez\n27\nM\n109.0\n1.98\n210.0\n27.803285\nCABA\n\n\n\n\n\n\n\n\n\n6.3.1.4 Otros métodos útiles\nA continuación, se muestra una lista con otros métodos muy útiles al analizar datos:\n\n\n\n\n\n\n\nMétodo\nDescripción\n\n\n\n\nsort_values(by, ascending)\nOrdena el DataFrame considerando los valores de una columna\n\n\nvalue_counts()\nIndica los valores únicos de una determinada columna y el número de veces que aparece en el DataFrame\n\n\ngroupby()\nAgrupar las filas según ciertos valores de una columna\n\n\n\nPara utilizar la función sort_values(by, ascending), se debe indicar en el parámetro by una lista con las columnas consideradas para ordenar el DataFrame y en ascending, True para orden creciente y False para decreciente.\n\ndf.sort_values(by=['peso', 'edad'], ascending=[False, True])\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n12\nMiguel Gutiérrez\n27\nM\n109.0\n1.98\n210.0\n27.803285\nCABA\n\n\n2\nJavier Garcíaz\n24\nM\n92.0\n1.81\n191.0\nNaN\nBuenos Aires\n\n\n8\nPedro Tenorio\n35\nM\n90.0\n1.94\n241.0\n23.913275\nCABA\n\n\n0\nJosé Martínez\n18\nM\n85.0\n1.79\n182.0\n26.528510\nCABA\n\n\n11\nJosé Sanz\n58\nM\n78.0\n1.87\n198.0\n22.305471\nBuenos Aires\n\n\n9\nSantiago Manzano\n46\nM\n75.0\n1.85\n280.0\n21.913806\nCABA\n\n\n5\nAntonio Ruiz\n68\nM\n66.0\n1.74\n249.0\n21.799445\nBuenos Aires\n\n\n1\nRosa Díaz\n32\nF\n65.0\n1.73\n232.0\n21.718066\nBuenos Aires\n\n\n3\nCarmen López\n35\nF\n65.0\n1.70\n200.0\n22.491349\nBuenos Aires\n\n\n6\nAntonio Fernández\n51\nM\n62.0\n1.72\n276.0\n20.957274\nCABA\n\n\n13\nCarolina Moreno\n20\nF\n61.0\n1.77\n194.0\n19.470778\nCABA\n\n\n7\nPilar González\n22\nF\n60.0\n1.66\nNaN\n21.773842\nCABA\n\n\n10\nMacarena Álvarez\n53\nF\n55.0\n1.62\n262.0\n20.957171\nCABA\n\n\n4\nMarisa Collado\n46\nF\n51.0\n1.58\n148.0\n20.429418\nCABA\n\n\n\n\n\n\n\nUtilizando value_counts() podemos, por ejemplo, establecer la cantidad de pesonas de sexo F y M:\n\ndf['sexo'].value_counts()\n\nsexo\nM    8\nF    6\nName: count, dtype: int64\n\n\nFinalmente con groupby() se pueden agrupar las filas del DataFrame. Dado el siguiente ejemplo:\n\ndf.groupby(['sexo'])['edad'].agg(np.mean)\n\nC:\\Users\\aldan\\AppData\\Local\\Temp\\ipykernel_11740\\3677012981.py:1: FutureWarning: The provided callable &lt;function mean at 0x000001C36D614180&gt; is currently using SeriesGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n  df.groupby(['sexo'])['edad'].agg(np.mean)\n\n\nsexo\nF    34.666667\nM    40.875000\nName: edad, dtype: float64\n\n\n¿Qué realizamos con el código anterior? - Se agrupa por “sexo” con groupby(['sexo']), obteniéndose dos grupos: “M” y “F”. - Se indican las columnas cuyos valores se desean ver agrupadas, en este caso, ['edad']. - Con agg() se establece la operación a realizar con los valores de la columna “edad”, para cada grupo. En este caso, se calcula el promedio con np.mean\nEs decir, se está calculandos el promedio de edad por sexo.\nVeamos otro ejemplo:\n\ndf.groupby(['sexo', 'direccion']).agg({'colesterol': [np.max, np.min], 'peso': [np.mean]})\n\nC:\\Users\\aldan\\AppData\\Local\\Temp\\ipykernel_11740\\1230627520.py:1: FutureWarning: The provided callable &lt;function max at 0x000001C36D603740&gt; is currently using SeriesGroupBy.max. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"max\" instead.\n  df.groupby(['sexo', 'direccion']).agg({'colesterol': [np.max, np.min], 'peso': [np.mean]})\nC:\\Users\\aldan\\AppData\\Local\\Temp\\ipykernel_11740\\1230627520.py:1: FutureWarning: The provided callable &lt;function min at 0x000001C36D603880&gt; is currently using SeriesGroupBy.min. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"min\" instead.\n  df.groupby(['sexo', 'direccion']).agg({'colesterol': [np.max, np.min], 'peso': [np.mean]})\nC:\\Users\\aldan\\AppData\\Local\\Temp\\ipykernel_11740\\1230627520.py:1: FutureWarning: The provided callable &lt;function mean at 0x000001C36D614180&gt; is currently using SeriesGroupBy.mean. In a future version of pandas, the provided callable will be used directly. To keep current behavior pass the string \"mean\" instead.\n  df.groupby(['sexo', 'direccion']).agg({'colesterol': [np.max, np.min], 'peso': [np.mean]})\n\n\n\n\n\n\n\n\n\n\ncolesterol\npeso\n\n\n\n\nmax\nmin\nmean\n\n\nsexo\ndireccion\n\n\n\n\n\n\n\nF\nBuenos Aires\n232.0\n200.0\n65.000000\n\n\nCABA\n262.0\n148.0\n56.750000\n\n\nM\nBuenos Aires\n249.0\n191.0\n78.666667\n\n\nCABA\n280.0\n182.0\n84.200000\n\n\n\n\n\n\n\nEn este caso se agrupa por sexo y dirección, y se informa para cada grupo el valor máximo y mínimo de colesterol y el promedio del peso de cada uno.\nFinalmente las filas que contienen datos faltantes, es decir NaN, pueden ser identificados usando la función isnull(). Esta devuelve True si el valor de la columna es nulo o NaN. Por ejemplo:\n\ndf['IMC'].isnull()\n\n0     False\n1     False\n2      True\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12    False\n13    False\nName: IMC, dtype: bool\n\n\nPara visualizar aquella línea donde el índice de masa corporal es nulo, filtramos:\n\ndf[df['IMC'].isnull() == True]\n\n\n\n\n\n\n\n\nnombre y apellido\nedad\nsexo\npeso\naltura\ncolesterol\nIMC\ndireccion\n\n\n\n\n2\nJavier Garcíaz\n24\nM\n92.0\n1.81\n191.0\nNaN\nBuenos Aires",
    "crumbs": [
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Librerías de Python</span>"
    ]
  },
  {
    "objectID": "guia.html",
    "href": "guia.html",
    "title": "Guía de Ejercicios",
    "section": "",
    "text": "Recomendaciones al realizar las guías",
    "crumbs": [
      "Guía de Ejercicios"
    ]
  },
  {
    "objectID": "guia.html#recomendaciones-al-realizar-las-guías",
    "href": "guia.html#recomendaciones-al-realizar-las-guías",
    "title": "Guía de Ejercicios",
    "section": "",
    "text": "Prestá atención al leer el enunciado. En particular:\n\nSi se pide una función que devuelva o calcule un valor, la función debe tener una función return.\nSi se pide una función que imprima un valor, la función debe tener un print.\nSi se pide una función que pida o pregunte algo al usuario, la función debe tener un input.\nA menos que se diga específicamente “pedirle al usuario”, no es necesario que el programa contenga input. En todo caso, hacer que la función reciba el o los datos por parámetro.\n\nCada ejercicio puede tener muchas soluciones posibles. Una vez que encuentres una solución, en lugar de pasar al siguiente ejercicio, pensá si se te ocurre una solución cuya codificación sea más simple.\nEs muy importante que el código sea lo más claro y legible posible.\n\nEn particular, nombres de funciones y variables deben ser descriptivos.\nTambién prestá atención a los espacios en blanco y a la indentación.\n\nNo documentes en exceso, pero tampoco ahorres documentación necesaria.\nProbá siempre que el código cumpla con lo solicitado.",
    "crumbs": [
      "Guía de Ejercicios"
    ]
  },
  {
    "objectID": "guia.html#guía-1-introducción-a-la-algoritmia-y-la-programación",
    "href": "guia.html#guía-1-introducción-a-la-algoritmia-y-la-programación",
    "title": "Guía de Ejercicios",
    "section": "Guía 1: Introducción a la Algoritmia y la Programación",
    "text": "Guía 1: Introducción a la Algoritmia y la Programación\n\n\n\n\n\n\nRecomendación\n\n\n\nEn esta guía nos dedicaremos a introducirnos en los conceptos de programación y algoritmo. Para los primeros seis ejercicios, te recomendamos ver este video para recordar cómo entiende la computadora nuestras instrucciones.\n\n\n\nSe tiene que explicar a una máquina exactamente cómo servir un vaso de jugo (de los que vienen en cartón) de la heladera. Recordando la definición de algoritmo, hacer una descripción paso a paso de lo que se tiene que hacer y usar para lograr el objetivo. Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nSe tiene que explicar a una máquina exactamente cómo hacer una tostada con queso, pensá qué ingredientes se necesitan con sus cantidades, cómo tiene que ser el espacio de trabajo y los elementos que va a necesitar usar. Recordando la definición de algoritmo, hacer una descripción paso a paso de lo que se tiene que hacer y usar para hacer una tostada con queso. Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nSe te pide que organices una colecta de alimentos no perecederos por la Ciudad de Buenos Aires. Contamos con algunos automóviles y camionetas de voluntarios, un listado de donaciones, listado de los alimentos a donar, la disponibilidad horaria y la dirección en la cual se dejan los alimentos. La colecta se realiza en un solo día. ¿Cómo la organizarías? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nTenés que enviar invitaciones personalizadas para tu cumpleaños. Cada invitación tiene que mencionar el nombre de la persona y la relación que tiene con vos. Contamos con una impresora a la que le das el texto a enviar, un listado con los nombres de los invitados y la relación que cada uno tiene con vos. ¿Cómo redactarías el texto de la invitación? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nSe te encargó definir qué datos son necesarios para el registro de estudiantes en un curso de inglés. ¿Qué datos crees que deberían ser obligatorios y cuáles opcionales? ¿Y si el curso es de cocina? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nContás con un listado de cosas a comprar y tenes que ir a un supermercado que cuenta con distintas góndolas o pasillos. Cada góndola o pasillo puede contar con varios, uno o ninguno de los productos de tu lista. ¿Cuál sería el listado de instrucciones para poder terminar lo más rápido posible? Pista: No vas a necesitar nada de código en este ejercicio, sólo nombrar los pasos.\nCon el anexo de Replit de la Unidad 1, realizá tu primer programa: hacé que se imprima por pantalla un “¡Hola mundo!”.",
    "crumbs": [
      "Guía de Ejercicios"
    ]
  },
  {
    "objectID": "guia.html#guía-2-tipos-de-datos-expresiones-y-funciones",
    "href": "guia.html#guía-2-tipos-de-datos-expresiones-y-funciones",
    "title": "Guía de Ejercicios",
    "section": "Guía 2: Tipos de Datos, Expresiones y Funciones",
    "text": "Guía 2: Tipos de Datos, Expresiones y Funciones\n\nGuardar el texto “Hola, Mundo!” en una variable e imprimirla por pantalla.\nGuardar los números 1, 2 y 3 en tres variables distintas e imprimirlos por pantalla.\n\nGuardar los números 1, 2 y 3 en tres variables distintas y luego sumarlos e imprimir el resultado por pantalla.\n\nRepetir con las distintas operaciones disponibles que se vieron en la unidad 2: resta, multiplicación, división, división entera, resto, potencia; combinando los números entre sí.\n\nCrear un programa que le solicite al usuario:\n\nSu nombre y lo imprima por pantalla.\nSu edad y la imprima por pantalla.\nSu edad, le sume 1, y la imprima por pantalla.\n\nCrear un programa que le solicite al usuario un número, y que devuelva el resto obtenido de dividirlo por 2.\n¿Qué operador vimos para obtener el resto?\nEscribir un programa que le pida al usuario su año de nacimiento, y que le diga qué edad tiene en el año actual.\nCrear un programa que le solicite al usuario 5 enteros y que muestre por pantalla el promedio de ellos. Hacerlo de dos formas:\n\nPrimero, usando 5 variables para cada entero.\nDespués, usando una sola variable para almacenar la suma de los 5 enteros. ¿Cómo se te ocurre que podrías hacer?\n\nCrear una función que reciba un número y que devuelva el valor absoluto.\nCrear una función que reciba un número y que devuelva True si es par, y False si es impar.\nCrear una función que reciba un número y un string, y que devuelva ambos concatenados dentro de un nuevo string.\nCrear una función que reciba dos enteros y que devuelva el resto y el cociente entre ellos.\nCrear una función que le pida al usuario su nombre y apellido, e los imprima con el siguiente formato: “Apellido, Nombre”.\nHacer una función que reciba una palabra y devuelva la cantidad de letras que tiene.\n\nHacer una función que reciba una palabra y que imprima los primeros 5 caracteres únicamente. Ejemplo: Si se recibe “pensamiento” se debe imprimir “pensa”.\nHacer una función que reciba una palabra y que imprima sólo los caracteres ubicados en posiciones pares. Ejemplo: Si se recibe “pensamiento” se debe imprimir “pnaino”.\nHacer una función que reciba una palabra y que imprima la palabra dada vuelta. Ejemplo: Si se recibe “materia” se debe imprimir “airetam”.\n\nHacer una funcion que reciba una palabra, le borre todas las letras “a” e imprima el resultado por pantalla. Pista: usar una función predefinida de Python. Ejemplo: Si se recibe “casa” se debe imprimir “cs”. Pista: usar slices.\nAnalizar qué tipo de dato (o error) se obtiene al hacer las siguientes operaciones:\n\n5 / 2\n5 // 2\n5 % 2\n5 ** 2\n5.0 / 2\n5.0 // 2\n5.0 % 2\n5.0 ** 2\n5 / 2.0\n5 // 2.0\n5 % 2.0\n5 ** 2.0\n5.0 / 2.0\n5.0 // 2.0\n5.0 % 2.0\n5.0 ** 2.0\n\"Hola\" * 2\n\"Hola\" + 2\n\"Hola\" + \"2\"\nx = \"Hola\"\nx += \" mundo\"\n\n\nEscribir una función que convierta un valor dado en grado Celcius, a Fahrenheit. Recordar que la fórmula para la conversión es: F = 9/5 * C + 32.\nEscribir una función que convierta un valor dado en grados Fahrenheit, a Celcius. Usar la misma fórmula anterior.\n\nEscribir una función que calcule el área de un triángulo recibiendo como parámetros su base y su altura.\nSiendo el cálculo de la norma de un vector \\(v\\) en \\(R^3\\):\n\\[||v|| = \\sqrt{v_1^2 + v_2^2 + v_3^2}\\]\nEscribir una función que calcule la norma de un vector en R3 recibiendo como parámetros las 3 componentes \\(v_1\\), \\(v_2\\) y \\(v_3\\) del mismo.\nDesafío (no obligatorio): Calcular el área de un rectángulo (alineado con los ejes \\(x\\) e \\(y\\)), dadas sus coordenadas \\(x_1\\), \\(x_2\\), \\(y_1\\) e \\(y_2\\).",
    "crumbs": [
      "Guía de Ejercicios"
    ]
  },
  {
    "objectID": "guia.html#guía-3-estructuras-de-control",
    "href": "guia.html#guía-3-estructuras-de-control",
    "title": "Guía de Ejercicios",
    "section": "Guía 3: Estructuras de Control",
    "text": "Guía 3: Estructuras de Control\n\n1. Decisiones\n\nEscribir una función que, dado un número entero \\(n\\), calcule si es impar o no.\nEscribir una implementación propia de la función \\(abs\\), que devuelva el valor absoluto de cualquier valor que reciba. Ejemplo: mi_abs(5) devuelve 5 y mi_abs(-5) devuelve 5. Pista: No se puede usar la función predefinida abs.\nEscribir una función que reciba un número y devuelva True si es entero y False si no lo es. Pista: no se puede usar la función isinstance.\nEscribir una función para determinar si una letra recibida es vocal o no. La misma debe devolver un valor booleano. Luego, escribir una función para determinar si una letra es consonante o no.\n\nResolver sin el uso de in ni not in.\nResolver usando in y not in.\nResolver para que la función identifique tanto mayúsculas como minúsculas. Pista: investigar los métodos lower y upper de string.\n\n\n\n\n\n\n\n\nTip: in y not in\n\n\n\n\n\n¿Conocés el uso de in?\nPara saber si un elemento está en una lista o en un string, podemos usar in y not in. Por ejemplo:\n\n'a' in 'hola'\n\nTrue\n\n\n\n'w' in 'hola'\n\nFalse\n\n\n\n'w' not in 'hola'\n\nTrue\n\n\n\n'casa' in ['cama', 'mesa', 'silla']\n\nFalse\n\n\n\n\n\n\nEscribir funciones que resuelvan los siguientes problemas:\n\nDado un año, que devuelva si es bisiesto. Nota: un año es bisiesto si es un número divisible por 4, pero no si es divisible por 100, excepto que también sea divisible por 400.\nDado un mes y un año, que devuelva la cantidad de días correspondientes.\nPedirle al usuario su día y mes de cumpleaños. El programa debe imprimir un mensaje indicando a qué signo corresponde el usuario.\n\nAries: 21 de marzo al 20 de abril.\nTauro: 21 de abril al 20 de mayo.\nGeminis: 21 de mayo al 21 de junio.\nCancer: 22 de junio al 23 de julio.\nLeo: 24 de julio al 23 de agosto.\nVirgo: 24 de agosto al 23 de septiembre.\nLibra: 24 de septiembre al 22 de octubre.\nEscorpio: 23 de octubre al 22 de noviembre.\nSagitario: 23 de noviembre al 21 de diciembre.\nCapricornio: 22 de diciembre al 20 de enero.\nAcuario: 21 de enero al 19 de febrero.\nPiscis: 20 de febrero al 20 de marzo.\nPiedra, papel o tijera: escribir un programa de “Piedra, papel o tijera” tal que sea imposible que el usuario gane. El usuario debe ingresar R (piedra), P (papel), o T (tijera) y la computadora debe siempre ganarle. Ejemplo:\n¡Piedra (R), papel (P) o tijera (T)!\nIngrese jugada: R\n¡Papel! ¡Gané!\n¡Piedra (R), papel (P) o tijera (T)!\nIngrese jugada: P\n¡Tijera! ¡Gané!\n¡Piedra (R), papel (P) o tijera (T)!\nIngrese jugada: T\n¡Piedra! ¡Gané!\n¡Piedra (R), papel (P) o tijera (T)!\nIngrese jugada: M\nEsa jugada no está disponible.\nSuponiendo que el primer día del año fue lunes, escribir una función que reciba un número con el día del año (de 1 a 366) y devuelva el día de la semana que le toca. Por ejemplo: si se recibe ‘3’, debe devolver “miércoles”, y si se recibe ‘9’, debe devolver “martes”.\n\n\n\n2. Ciclos\n\nEscribir función que:\n\nImprima por pantalla todos los números entre 10 y 20.\nSalude a todas las personas de esta lista [Flaminia, Serena, Agustina, Priscila, Sol, Agostina, Iara, Lu] con el mensaje \"Hola &lt;nombre&gt;! Vamos a aprender a programar\".\nLe pida al usuario que ingrese 5 números y le muestre la suma total de todos ellos.\nImprima por pantalla todos los números entre 100 y 199 que sean divisibles por 7.\nReciba dos números, y recorra todos los números entre ellos, imprimiendo en pantalla si es par o impar. Por ejemplo, recibiendo 1 y 3, debe imprimir:\n\n1 es impar\n2 es par\n3 es impar\nSe quiere hacer un programa para enseñar a los niños las tablas de multiplicar del 1 al 10. Crear una función que reciba un número e imprima por pantalla la tabla de multiplicar de ese número. Ejemplo:\nmostrar_tablas_para(1)\ndebe imprimir:\n1 x 1 = 1\n1 x 2 = 2\n1 x 3 = 3\n1 x 4 = 4\n1 x 5 = 5\n1 x 6 = 6\n1 x 7 = 7\n1 x 8 = 8\n1 x 9 = 9\n1 x 10 = 10\nmostrar_tablas_para(-2)\ndebe imprimir:\nError: El número debe ser positivo y estar entre 1 y 10\nCrear una función que cante el feliz cumpleaños. Dado un entero, debe imprimir ‘Que los cumplas feliz’ en distintas líneas por esa cantidad de veces.\n\nNecesitamos escribir un programa de cobro en el supermercado. La función debe recibir un número entero que representa el monto a pagar y debe permitir al usuario que ingrese valores, hasta que el pago se haya realizado en su totalidad. Además, le debe ir indicando cuánto le queda por pagar. El programa no da vuelto.\n\nEjemplo: Su total a pagar es: 500  Ingrese el monto a pagar: 100  Pendientes: 400. Ingrese el monto a pagar: 200  Pendientes: 200. Ingrese el monto a pagar: 200  Pendientes: 0. Gracias por su compra.\n\nHacer que el programa anterior dé vuelto:\n\nEjemplo: Su total a pagar es: 500  Ingrese el monto a pagar: 100  Pendientes: 400. Ingrese el monto a pagar: 200  Pendientes: 200. Ingrese el monto a pagar: 300  Pendientes: 0. Su vuelto es: 100. Gracias por su compra.\nEscribir un programa que le pida al usuario que ingrese un número. Para ese número, se imprime la tabla de multiplicar del 1 al 10. Luego, se le vuelve a pedir otro número. Si el usuario ingresa “X”, el programa debe terminar. El usuario debe poder ingresar números indefinidamente hasta que ingrese “X”. Se puede reutilizar la función del ejercicio 9 de esta guía.\nEjemplo: Hola! Esto es Tablas de Multiplicar  Ingrese un número o \"X\" para salir: 1  1 x 1 = 1  1 x 2 = 2  1 x 3 = 3  1 x 4 = 4  1 x 5 = 5  1 x 6 = 6  1 x 7 = 7  1 x 8 = 8  1 x 9 = 9  1 x 10 = 10  Ingrese un número o \"X\" para salir: -2  Error: El número debe ser positivo y estar entre 1 y 10  Ingrese un número o \"X\" para salir: X  ¡Adios!\nManejo de contraseñas\n\nEscribir un programa que contenga una constraseña inventada, que le pregunte al usuario la contraseña, y no le permita continuar hasta que la haya ingresado correctamente.\nModificar el programa anterior para que solamente permita una cantidad fija de intentos.\nModificar el programa anterior para que sea una función que devuelva si el usuario ingresó o no la contraseña correctamente, mediante un valor booleano (True o False).\n\n\nHacer una función que reciba un número del 1 al 10, y luego permita al usuario poder adivinar ese número, ingresando valores repetidamente. Para cada ingreso del usuario, el programa debe indicarle si su numero es menor o mayor al número a adivinar. Una vez que el usuario ingresa el número correcto, lo felicita y termina.\nRepetir permitiendo únicamente 3 intentos.\nRepetir generando el número aleatoriamente de la siguiente forma dentro de la función, sin recibirlo por parámetro:\n\n\n\nimport random\nnumero_a_adivinar = random.randint(1, 10)\nprint(numero_a_adivinar)\n\n8\n\n\n\n\n\n\n\n\nTip: Librerías\n\n\n\n\n\n¿Sabías que Python tiene muchas librerías que podés usar para hacer cosas más complejas? Por ejemplo, la librería random tiene funciones para generar números aleatorios. También hay otras librerías como Pandas para trabajar con datos, Matplotlib para hacer gráficos, Numpy para trabajar con matrices, y muchas más. Vamos a estar viendo estas tres en la última unidad de la materia.\nUna librería es un conjunto de funciones que alguien más escribió y que podemos usar en nuestros programas. Para usar una librería, primero tenemos que importarla. Por ejemplo, para usar la librería random, tenemos que poner import random al principio de nuestro programa (arriba de todo en nuestro archivo). Luego, podemos usar las funciones de la librería, como random.randint(1, 10).\n\n\n\n\n\nQueremos modelar una máquina de sacar juguetes. Debemos hacer una función que reciba un número que representa la cantidad de fichas \\(x\\) que necesita la máquina para funcionar. Se debe imprimir un mensaje en pantalla que indique “Ingresá \\(x\\) fichas para comenzar”. El usuario deberá ingresar entonces letras “F”, que representan a las fichas. Notar que si se ingresa algo distinto a “F”, se ignora.\n\nSe debe seguir solicitando fichas siempre que no se haya alcanzado la cantidad necesaria para funcionar. Cuando se haya alcanzado la cantidad necesaria, se debe imprimir un mensaje que indique “¡A jugar!”. Ejemplo:\nIngresá 2 fichas para comenzar: F\nIngresá 2 fichas para comenzar: B\nIngresá 2 fichas para comenzar: Hola\nIngresá 2 fichas para comenzar: F\n¡A jugar!\n\nModificar el programa anterior para que vaya mostrando la cantidad de fichas que faltan para comenzar a jugar. Ejemplo:\n\nIngresá 2 fichas para comenzar: F\nIngresá 1 fichas para comenzar: B\nIngresá 1 fichas para comenzar: ficha\nIngresá 1 fichas para comenzar: F\n¡A jugar!\nCrear una función que calcule si un número es primo o no. Un número es primo cuando solamente es divisible por sí mismo y por 1. Pista: usar el operador módulo %.\nDesafío (obligatorio): Crear una función que reciba un número entero e imprima los números primos entre 0 y el número ingresado.\nDesafío (obligatorio):\n\nCrear una función que reciba dos números, y devuelva la suma de todos los números múltiplos de 7 entre esos dos números. Por ejemplo, si recibe 3 y 25, debe devolver 7 + 14 + 21 = 42. Si recibe 3 y 4, debe devolver 0, ya que no hay múltiplos de 7 entre esos dos números.\nRepetir calculando el promedio en vez de la suma.\nRepetir calculando únicamente el promedio entre los primeros 3 múltiplos de 7 encontrados. Pista: usar break.\nRepetir calculando únicamente el promedio entre los múltiplos de 7 encontrados que no sean múltiplos de 2. Pista: usar continue.\n\nDesafío (obligatorio):\n\nEscribir una función que dada la cantidad de ejercicios de un examen, y el porcentaje de ejercicios bien resueltos necesario para aprobar dicho examen, revise un grupo de exámenes.\n\nPara ello, en cada paso debe preguntarle al usuario la cantidad de ejercicios resueltos por el alumno, o pedirle que ingrese “*” para salir. Debe mostrar por pantalla el porcentaje correspondiente a la cantidad de ejercicios resueltos respecto a la cantidad de ejercicios del examen y una leyenda que indique si aprobó o no.\n\nAdicional al punto anterior: imprimir un mensaje informándole al usuario la cantidad de ejercicios y el % de aprobación.\nValidar que el usuario siempre ingrese números positivos y menor o iguales a la cantidad de ejercicios del examen, o “*“. De lo contrario, mostrar un mensaje de error y volver a pedirle el dato al usuario.",
    "crumbs": [
      "Guía de Ejercicios"
    ]
  },
  {
    "objectID": "guia.html#guía-4-tipos-de-estructuras-de-datos",
    "href": "guia.html#guía-4-tipos-de-estructuras-de-datos",
    "title": "Guía de Ejercicios",
    "section": "Guía 4: Tipos de Estructuras de Datos",
    "text": "Guía 4: Tipos de Estructuras de Datos\n\nCadenas de caracteres\n\nEscribir funciones que dada una cadena y un caracter:\n\nInserte el caracter entre cada letra de la cadena. Ejemplo: 'separar' y '-' debería devolver 's-e-p-a-r-a-r'.\n\nReemplace todos los espacios por el caracter. Ejemplo: 'mi archivo de texto.txt' y '_’ debería devolver 'mi_archivo_de_texto.txt'.\n\nReemplace todos los dígitos de la cadena por el caracter. Ejemplo: 'su clave es: 1540' y '*' debería devolver 'su clave es: ****'.\n\nInserte el caracter cada 3 dígitos en la cadena. Ejemplo: '2552552550' y '.' debería devolver '255.255.255.0'\nModificar todas las anteriores para que, adicionalmente, reciba un parámetro que indique la cantidad máxima de reemplazos o inserciones a realizar. Ejemplo: 'su clave es: 1540', '*' y 3 debería devolver 'su clave es: ***0'.\n\nEscribir una función que reciba una cadena que contiene un largo número entero y devuelva una cadena con el número y las separaciones de miles. Por ejemplo, si recibe 1234567890, debe devolver 1.234.567.890. Cuidado: no es lo mismo 123.456.789.0 que 1.234.567.890. Tienen que ser separaciones de miles y quedar un número válido.\nEscribir funciones que dada una cadena de caracteres:\n\nDevuelva la primera letra de cada palabra. Ejemplo: si se recibe Ciclo Básico Común se debe devolver CBC.\nIndique si se trata de un palíndromo. Por ejemplo, anita lava la tina es un palíndromo (se lee igual de izquierda a derecha que de derecha a izquierda).\n\nEscribir funciones que dadas dos cadenas de caracteres:\n\nIndique si la segunda cadena es subcadena de la primera. Por ejemplo, 'compu' es subcadena de 'computacional'.\nDevuelva la que sea anterior en orden alfábetico. Por ejemplo, si recibe 'kde' y 'gnome' debe devolver 'gnome'.\n\nEscribir una función que, dada una cadena de caracteres, devuelva una lista con cada uno de los caracteres que la componen en mayúscula. Ejemplo: 'Hola' debe devolver ['H', 'O', 'L', 'A']. Restricción: no se permite el uso de ciclos for/while.\nEscribir una función que, dada una cadena de caracteres, devuelva una tupla con cada uno de los caracteres que no es una vocal. Ejemplo: 'Algoritmos' debe devolver ('l', 'g', 'r', 't', 'm', 's'). Restricción: no se permite el uso de ciclos for/while.\nEscribir una función que, dada una cadena de caracteres, devuelva el número de índice del último caracter. Por ejemplo, para la cadena 'Hola' debe devolver 3. Restricción: no se permite el uso de ciclos for/while.\nDesafío (obligatorio):\n\nSe quiere implementar un buscador dentro de un editor de texto, que permita encontrar todas las ocurrencias de una palabra en un texto. Para ello, se debe implementar una función que reciba como parámetro una palabra y un texto, y que devuelva una lista con las posiciones de inicio de cada ocurrencia de la palabra dentro del texto. Ejemplo: si se busca 'al' en 'calcule el precio al valor actual', debe devolver [1, 18, 22, 31]. Pista: index devolverá un error si la subcadena no se encuentra. ¿Qué otro método tenemos disponible para buscar subcadenas?\nModificar la función anterior para que devuelva la cantidad de ocurrencias encontradas. Ejemplo: si se busca 'al' en 'calcule el precio al valor actual', debe devolver 4. Restricción: No se puede usar el método len.\n\nDesafío (no obligatorio): Escribir una función que reciba dos cadenas de caracteres y devuelva una lista con todos los caracteres que no tienen en común. Ejemplo: 'Python' y 'Hola' debería devolver el conjunto de letras ['P', 'y', 't', 'l', 'a', 'n'], indiferentemente del orden y de si está en mayúscula o minúscula. Nota: para que un caracter esté en la lista, no es necesario que esté en la misma posición. Restricción: no se permite el uso de ciclos for/while. Pista: investigar cómo usar lambda.\n\n\n\nRangos, Tuplas y Listas\n\nUsar un rango para:\n\nImprimir los números del 10 al 50 inclusive, saltando de 5 en 5.\nImprimir los números del 40 al 20 en orden decreciente, saltando de 2 en 2.\nCrear una lista con los números del 4 al 10. Luego, acceder con el índice a los elementos que contienen a los números 4, 6 y 9 e impimirlos por pantalla. Pista: recordar que los índices comienzan en 0.\n\nEscribir una función que reciba:\n\nUna lista y devuelva True si su longitud es par y False si su longitud es impar.\n\nUna lista de números cualesquiera y devuelva el elemento máximo y el mínimo.\nUna lista de números y devuelva otra lista con los mismos números ordenados de menor a mayor. Por ejemplo, si recibe [5, 10, 7, 3] debe devolver [3, 5, 7, 10].\n\n\nEscribir una función que reciba una lista de nombres y un número, que representa el cupo. La función debe devolver en una lista a los nombres que no pudieron entrar al curso por falta de cupo. Ejemplo: chequear_cupo(['Agustina', 'Iara', 'Priscila', 'Sol', 'Lucía'], 3) debe devolver ['Sol', 'Lucía'].\nModificar la función anterior para que devuelva únicamente a la última persona de la lista de la gente que pudo entrar. Ejemplo: chequear_cupo(['Agustina', 'Iara', 'Priscila', 'Sol', 'Lucía'], 3) debe devolver 'Priscila', porque es la última que tuvo cupo.\n\nDada la lista de tuplas [(\"Argentina\", 3), (\"España\",1), (\"Uruguay\", 2), (\"Francia\",2)], donde cada tupla contiene un país y la cantidad de mundiales que ganaron:\n\nHacer una función que reciba la lista por parámetro e imprima la información de cada país con el siguiente formato:\n\nPaís: &lt;nombre&gt; - Copas: &lt;cantidad&gt;\nSi y sólo si el país es “Argentina”, se debe imprimir el nombre con 3 estrellas: \"Argentina⭐⭐⭐\". Usar el operador abreviado +=.\n\nHacer una función que reciba la lista por parámetro y devuelva la cantidad de mundiales que ganaron entre todos los países. Ejemplo: contar_mundiales([(\"Argentina\", 3), (\"España\",1), (\"Uruguay\", 2), (\"Francia\",2)]) debe devolver 8.\nHacer una función que reciba la lista por parámetro y la devuelva, ordenada por cantidad de copas ganadas.\nHacer una función que reciba la lista por parámetro y devuelva una lista con los países que tienen más de una copa ganada.\n\nEscribir una función que reciba dos fichas de dominó y determine si encajan o no entre sí.\n\nResolver teniendo en cuenta que las fichas se reciben con formato de tuplas. Ejemplo: (3,4) y (5,4).\nResolver teniendo en cuenta que las fichas se reciben con formato de string. Ejemplo: '3-4' y '5-4'.\n\nEscribir una función que reciba dos vectores y devuelva su producto escalar. El producto escalar se calcula como: Siendo \\(v1 = (v1_1, v1_2, ..., v1_n)\\) y \\(v2 = (v2_1, v2_2, ..., v2_n)\\), entonces\n\\[v1 \\cdot v2 = (v1_1 \\cdot v2_1) + (v1_2 \\cdot v2_2) + ... + (v1_n \\cdot v2_n)\\] Si los vectores no tienen las mismas dimensiones, la función debe devolver None.\nSe tiene una base de datos con nombres de libros de la siguiente forma [\"La Noche de la Usina\", \"La Pregunta de sus Ojos\", \"Ser Feliz era Esto\",...], y se quiere saber cuántos libros repetidos tienen. Escribir una función que reciba la base de datos y devuelva, para cada uno de los títulos, cuántos ejemplares hay. La lista no tiene un tamaño fijo, y puede contener muchos títulos repetidos.\n\nEscribir una función que reciba una tupla, un índice, y un nuevo valor. La función debe modificar la tupla, cambiando el valor en la posición dada por el índice, por el nuevo valor pasado como parámetro. Devolver la tupla modificada.\nRepetir el ejercicio anterior, pero con una lista.\nRepetir ambos si ahora, en vez de recibir un índice, se recibe el valor a eliminar. Si no se contiene al valor, se devuelve la estructura tal cual se recibió.\n\nEscribir una función que reciba una lista y un número \\(n\\). Para dicho número \\(n\\), debe imprimir los últimos \\(n\\) elementos de la lista en orden inverso, y luego devolver la lista sin ellos. Ejemplo: Si se recibe [1, 2, 3, 4, 5] y n = 2, debe imprimir 5, 4 y devolver [1, 2, 3].\nEscribir una función que reciba una lista de números y devuelva la misma lista en orden inverso.\nEscribir una función que dado un valor \\(n\\), devuelva una lista con los números del 1 a \\(n\\). Restricción: usar listas por comprensión.\nEscribir una función que devuelva una matriz y una tupla (fila, columna), y devuelva el valor ubicado en esa posición de la matriz. Ejemplo: si se recibe la matriz [[1, 2], [3, 4]] y la tupla (0, 1), debe devolver 2.\nSe tiene una lista de supermercado escrita como string con productos separados por coma: \"pan, arroz, pescado, jugo, fideos,...\".\n\nEscribir una función que reciba la cadena de caracteres de los productos de supermercado y devuelva una lista con cada uno de los productos por separado: ['pan', 'arroz', 'pescado', 'jugo', 'fideos', ...].\nSe tiene además otra cadena de caracteres con los precios de cada producto: \"100, 50, 200, 80, 30,...\". Escribir una función que reciba ambas cadenas y devuelva una lista con tuplas de (producto, precio): [('pan', 100), ('arroz', 50), ('pescado', 200), ('jugo', 80), ('fideos', 30), ...].\nPara la función del punto anterior, escribir otra función que reciba la lista de tuplas y devuelva el precio total de la lista de compras.\n\nSe quiere crear una lista de supermercado, solicitándole al usuario productos hasta que ingrese el valor ‘X’. La función debe devolver los productos en un string, separados por comas. Ejemplo: si se ingresa ‘pan’, ‘arroz’, ‘pescado’, ‘X’, debe devolver \"pan, arroz, pescado\".\nHacer una función que reciba una lista de palabras, las ordene en orden alfabético y luego las una en un string separadas por espacios. Ejemplo: si recibe ['hola', 'como', 'estas'], debe devolver \"como estas hola\".\nDesafio (obligatorio): Escribir una función que reciba un tamaño y devuelva una matriz con 1 en la diagonal principal y 0 en el resto. Ejemplo: si recibe 4, debe devolver la matriz identidad de tamaño 4x4. \\[\n\\begin{bmatrix}\n1 & 0 & 0 & 0 \\\\\n0 & 1 & 0 & 0 \\\\\n0 & 0 & 1 & 0 \\\\\n0 & 0 & 0 & 1 \\\\\n\\end{bmatrix}\n\\]\nDesafio (obligatorio): Escribir una función que reciba una matriz y devuelva su transpuesta. Ejemplo: si recibe la matriz [[1, 2, 3], [4, 5, 6]], debe devolver [[1, 4], [2, 5], [3, 6]].\nSi se recibe: \\[\n\\begin{bmatrix}\n1 & 2 & 3  \\\\\n4 & 5 & 6  \\\\\n\\end{bmatrix}\n\\]\nSe debe devolver:\n\\[\n\\begin{bmatrix}\n1 & 4 \\\\\n2 & 5 \\\\\n3 & 6 \\\\\n\\end{bmatrix}\n\\]\nDesafio (no obligatorio): Agenda Simplificada\nEscribir una función que reciba una cadena a buscar y una lista de tuplas (nombre_completo, telefono), y busque dentro de la lista todas las entradas que contengan en el nombre completo la cadena recibida (puede ser el nombre, el apellido o sólo una parte de cualquiera de ellos). Debe devolver una lista con todas las tuplas encontradas.\nDesafio (no obligatorio): Sistema de facturación simplificado.\nSe cuenta con una lista ordenada de productos con tuplas de (identificador, descripción, precio), y una lista de los productos a facturar, con tuplas de (identificador, cantidad).\nSe desea generar una factura que incluya la cantidad, la descripción, el precio unitario y el precio total de cada producto comprado, y al final imprima el total general.\nEscribir una función que reciba ambas listas e imprima por pantalla la factura solicitada.\nSuper Desafio (no obligatorio): Batalla Naval\n\nSe tiene una matriz de 10x10 que representa un tablero. Cada celda contiene un 0 si está vacía, o un 1 si hay un barco (consideramos que en este caso, sólo hay barcos unitarios que ocupan un espacio).\nLa posición de los barcos se representa con tuplas de (fila, columna). Por ejemplo, si se tiene un barco en la fila 1, columna 3, se representa con la tupla (1, 3).\nEscribir una función que cree un tablero con 10 barcos ubicados aleatoriamente (usar la libreria random), y que permita al usuario intentar adivinar dónde están.\nEl usuario luego ingresa una posición, y la máquina indica si había un barco en esa posición (mostrando un mensaje por pantalla “¡Hundido!”) o no (“¡Agua!”).\nEl usuario gana cuando hunde todos los barcos del tablero. Si se equivoca más de 5 veces, pierde.\n\n\n\n\n\n\nBatalla Naval: Modo Supervivencia\n\n\n\n\n\n¿Te animás a que el juego sea un ida y vuelta? Es decir, que el usuario también pueda poner barcos y la máquina intente adivinar dónde están. Una posibilidad es que el usuario tenga su propio tablero en un papel, y una vez cada uno, la máquina y el usuario elijan una posición para atacar.\nTe dejamos unos tips:\n\nLas posiciones son limitadas por el tablero 10x10\nLas posiciones no deberían repetirse\n\n¿Se te ocurre una forma fácil de generar y guardar todas las posiciones posibles del tablero, e ir sacando de a una para que no se repitan? ¿Quién pensás que ganaría, la máquina o el usuario? En este caso, el usuario y la máquina tienen intentos ilimitados intercalados hasta que alguno de los dos gane.\n\n\n\n\n\n\nDiccionarios\n\nEscribir una función que reciba una lista de tuplas, y que devuelva un diccionario en donde las claves sean los primeros elementos de las tuplas, y los valores una lista con los segundos. Por ejemplo:\n\nl = [('Hola', 'don Pepito'), ('Hola', 'don Jose'), ('Buenos', 'días')]\nprint(tuplas_a_diccionario(l))\n{'Hola': ['don Pepito', 'don Jose'], 'Buenos': ['días']}\n\nEscriba una función que reciba una cadena y devuelva:\n\nUn diccionario con la cantidad de apariciones de cada palabra en la cadena. Por ejemplo, si recibe \"Qué lindo día que hace hoy\" debe devolver: {'qué': 2, 'lindo': 1, 'día': 1, 'hace': 1, 'hoy': 1}.\nUn diccionario con la cantidad de apariciones de cada caracter en la cadena.\n\nEscribir una función que reciba una cantidad de iteraciones N.\n\nSe deberá simular una persona que tira un dado N veces, y se deberá devolver un diccionario con la cantidad de apariciones de cada valor en el dado. Nota: para simular una tirada, usar import randomy random.randint(1, 6).\nRepetir el punto anterior, si ahora en vez de tirar 1 dado, tira 2. Se debe devolver un diccionario con la cantidad de apariciones de cada valor de la suma de ambos dados.\n\nEscribir un programa que le pida al usuario que ingrese nombres.\n\nSi el nombre se encuentra en la agenda, debe mostrar el teléfono.\nSi el nombre no se encuentra, debe permitir ingresar el teléfono correspondiente.\n\nEn ambos casos, El usuario puede utilizar la palabra “EXIT” para dejar de ingresar nombres.\nEscribir una función que reciba un texto y para cada caracter presente en el texto, devuelva la palabra más larga en la que se encuentra ese caracter.\nNos contratan para hacer un nuevo sistema de FIUBA para almacenar información de sus estudiantes:\n\n\n\nnombre\napellido\ndni\ncarrera\n\n\n\n\nVioleta\nPerez\n42000000\nInformática\n\n\nCarla\nGuanca\n42001001\nMecánica\n\n\nManuela\nGomez\n42002002\nQuímica\n\n\n\n\nCrear un diccionario que sirva para representar a cada persona. Debe contener las claves nombre, apellido, dni y carrera. Los diccionarios se deben guardan en una lista llamada estudiantes.\nAgregar al diccionario creado un nuevo elemento, que debe ser otro diccionario y represente las notas obtenidas en la carrera. La clave debe ser el codigo y el valor la nota (del 1 al 10) obtenida.\nAgregar para la estudiante Violeta Perez la nota 7 en la materia Algoritmos y Programación III (7507), y la nota 4 en la materia Análisis Matemático II (6103).\nTeniendo la lista de estudiantes, buscar en la lista la persona con mayor cantidad de notas e imprimirla por pantalla.\n\nEn un vivero se guardan las plantas en una lista de diccionarios con la siguiente información: especia, luz directa (si/no), precio. Se necesita un sistema que guarde las plantas a medida que van llegando. Hacer una función que reciba la lista de diccionarios de plantas, y los datos de la planta nueva, y agregue esa planta a la lista de diccionarios.\nEscribir una función que reciba una lista de diccionarios y una clave, y devuelva una lista con los valores correspondientes a esa clave.\nSe tiene un ticket de supermercado en forma de diccionario con los siguientes datos:\n\nNombre del Producto\nPrecio por Unidad\nCantidad\n\nSe pide hacer una función que reciba el ticket y devuelva el monto a pagar total.\nRosita tiene una lista de diccionarios donde guarda todas las películas que vió. La información para cada una es: el nombre de la serie, año en que salió, y la puntuación que le puso del 1 al 10. Hacer una función que reciba el diccionario y devuelva una nueva lista de diccionarios donde sólo estén las películas que tienen puntaje mayor a 7.\n\nResolver sin usar filter\nResolver usando filter.\n\nLa profesora Llamel guarda las notas del parcial de Pensamiento Computacional en una lista de diccionarios. Cada diccionario tiene la siguiente información: nombre, apellido, intento, nota.\nLos intentos pueden ser 1 (si es la primera vez que rinde el parcial) o 2 (si está en el recuperatorio).\n\nSe pide haecr una funciónq ue dada esta lista de diccionarios, se devuelva el promedio de las notas en la primera oportunidad que rindieron los alumnos.\nGeneralizar la función anterior, para que también reciba el número de intento y se pueda devolver el promedio de cualquiera de los dos intentos.\n\nEn una fábrica se tiene una base de datos donde se guardan todos los códigos de los productos que se fabrican como claves de un diccionario. Los valores de cada clave son nuevos diccionarios, con la siguiente información: fecha de vencimiento (mes,año), si pasó el chequeo de calidad o no.\nSe pude hacer una función que reciba esta lista de diccinoarios, y elimine a todos los productos que no pasaron el chequeo de calidad. Devolver en una tuple todos los productos eliminados en formato {codigo: diccionario del producto}.\nSe quiere guardar información de un grupo de maratonistas. Se necesita guardar su nombre, DNI y todas las maratones que corrió. Para esto último, se guardan: nombre de cada una, año, puesto y el tiempo que tardaron en correrlas (en minutos).\n\nCrear un diccionario de ejemplo que represente esta situación.\nTeniendo esta lista de diccionarios, ordenarlos alfabéticamente por el nombre de los maratonistas.\nTeniendo esta lista de diccionarios, ordenar las maratones en tiempo ascendente según el tiempo que tardaron en correrlas.\n\nDesafío (obligatorio): Laura tiene una lista de diccionarios donde guarda el valor de todas las reviews laborales anuales que le hicieron. La información de cada una es año, seniority en ese momento (trainee, junior, semisenior, senior), el sueldo en ese momento y el valor del bono de performance que le dieron. La semana pasada le avisaron que por políticas de la empresa, los bonos ahora deben calcularse como un porcentaje de su sueldo.\nLaura quiere entonces actualizar sus diccionarios, para que en vez de guardar el monto exacto del bono, guarde el porcentaje que le corresponde. Ejemplo: si en el 2019 su sueldo era de $1.000.000 y el bono que le dieron era de $40.000, el bono fue del 4% del sueldo.\n\nHacer una función que reciba la lista de diccionarios, y para cada una de las reviews, modifique el valor del bono por el porcentaje correspondiente.\nHacer una función que reciba la lista de diccionarios ya modificada y devuelva los años en los que Laura tuvo un bono mayor al 50% de su sueldo. Restricción: usar filter y map.\n\nDesafío (no obligatorio): Donarg (https://www.donarg.com.ar/) es un proyecto que nació con estudiantes de FIUBA con el fin de optimizar procesos tanto para donantes de sangre como para hospitales y servicios de hemoterapia. Formado por estudiantes y graduados universitarios comprometidos, fue galardonado con el primer puesto en la FIUBATON 2020 “Desafío Cuarentena” del FIUBA Consulting Club, destacándose entre más de 100 proyectos.\nDonarg necesita un sistema que permita filtrar una base de datos de posibles donantes de sangre, quedándose con los que cumplen los requisitos.\nLa base contiene los siguientes datos de cada posible donante:\n\nNombre\nApellido\nEdad\nPeso\nFecha de la última donación. Puede ser ‘None’ si nunca donó. Formato: (dia,mes,año)\nFecha del último tatuaje. Puede ser ‘None’ si no tiene tatuajes. Formato: (dia,mes,año)\nTipo de sangre. Puede ser ‘0+’, ‘0-’, ‘A+’, ‘A-’, ‘B+’, ‘B-’, ‘AB+’, ‘AB-’\n\nLos requisitos son:\n\nTener entre 16 y 65 años\nPesar más de 50 kilos\nQue hayan pasado 2 meses desde la última donación\nQue hayan pasado 6 meses desde el último tatuaje\n\n\nSe pide hacer una función que reciba una lista de diccionarios con la información de cada posible donante, y devuelva una lista con los que cumplen los requisitos.\nSe pide hacer una función que priorice a los donantes que tienen sangre tipo 0 (positivo y negativo) por sobre todos los A, B y AB (positivos y negativos); ya que son los que más se necesitan. La función debe recibir la lista de diccionarios con la información de cada posible donante ya filtrada por requisitos, y devolver una nueva lista ordenados de mayor a menor prioridad.\nSe pide hacer una función que reciba la lista de diccionarios con la información de cada posible donante ya filtrada por requisitos y ordenada por prioridad, que se quede con los que son 0+ y 0-, y los ordene por órden alfabético de apellido.\n\n\n\nSi querés saber más sobre el proyecto, podés visitar su página web:\nhttps://www.donarg.com.ar/\no sacar turno para donar sangre en\nhttps://www.donarg.com.ar/dondedono.",
    "crumbs": [
      "Guía de Ejercicios"
    ]
  },
  {
    "objectID": "rules.html",
    "href": "rules.html",
    "title": "Regimen de Cursada",
    "section": "",
    "text": "Formas de Evaluación\nLa cursada de la materia cuenta con dos parciales:\nCada parcial cuenta con un único recuperatorio.",
    "crumbs": [
      "Regimen de Cursada"
    ]
  },
  {
    "objectID": "rules.html#formas-de-evaluación",
    "href": "rules.html#formas-de-evaluación",
    "title": "Regimen de Cursada",
    "section": "",
    "text": "Primer Parcial\n\nUnidad 1\nUnidad 2\nUnidad 3\nUnidad 4\n\nSegundo Parcial\n\nUnidad 5\nUnidad 6",
    "crumbs": [
      "Regimen de Cursada"
    ]
  },
  {
    "objectID": "rules.html#aprobación-de-la-cursadamateria",
    "href": "rules.html#aprobación-de-la-cursadamateria",
    "title": "Regimen de Cursada",
    "section": "Aprobación de la Cursada/Materia",
    "text": "Aprobación de la Cursada/Materia\nSe tiene dos formas de aprobación de la cursada:\n\nRegularización\nPromoción\n\n\nRegularización\nPara regularizar la cursada, se deben aprobar los dos parciales (o recuperatorios) con un mínimo de nota de 4 (cuatro) en cada uno.\nEl promedio entre ambos parciales (o recuperatorios) debe ser mayor o igual a 4 (cuatro) y menor a 7 (siete).\n\n\n\n\n\n\n¿Cómo calculo Promedio?\n\n\n\n\n\nSean:\n\nn1 la nota del primer parcial o recuperatorio del primer parcial\nn2 la nota del segundo parcial o recuperatorio del segundo parcial\n\nEl promedio es: (n1+n2)/2\n\n\n\nLa cursada regularizada habilita a rendir el examen final integrador, para el cual se tienen 3 (tres) oportunidades de rendir (más información abajo).\n\n\nPromoción\nPara promocionar la materia, se deben aprobar los dos parciales (o recuperatorios) con un mínimo de nota de 7 (siete) en cada uno.\nEl promedio entre ambos parciales (o recuperatorios) debe ser mayor o igual a 7 (siete).\n\n\n\n\n\n\nRendir Recuperatorios para Promoción\n\n\n\n\n\nSi se desea rendir el recuperatorio intentar subir la nota para la promoción, se debe tener en cuenta que la cátedra considerará únicamente válida la nota del último examen que se haya rendido.\nEjemplo:\n# caso 1\nparcial1 = 5\nrecuperatorio1 = 7\n=&gt; nota final parcial1 = 7\n\n# caso 2\nparcial1 = 5\nrecuperatorio1 = 4\n=&gt; nota final parcial1 = 4\n\n\n\n\n\nExamen Final Integrador\nEl examen final integrador consta de una evaluación que incluye todos los temas de la materia. Los mismos se rinden al final del cuatrimestre. Se aprueba con una nota mayor o igual a 4 (cuatro).\n\n\n\n\n\n\nDesaprobación de la Materia\n\n\n\nSi se desaprueba alguno de los parciales, el mismo puede recuperarse una sola vez.\nSi se desapruba el recuperatorio, se debe volver a cursar la materia el cuatrimestre siguiente.\nSi se desaprueba 3 (tres) veces el examen final integrador, se debe volver a cursar la materia el cuatrimestre siguiente.",
    "crumbs": [
      "Regimen de Cursada"
    ]
  }
]